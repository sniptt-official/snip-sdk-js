/* tslint:disable */
/* eslint-disable */
/**
 * API Reference
 * # Introduction The Sniptt API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns [JSON-encoded](http://www.json.org/) responses, and uses standard HTTP response codes, authentication, and verbs. # Authentication The Sniptt API uses API keys to authenticate requests. Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth. Use your API key by setting it in the initial configuration of sniptt. The Sniptt SDK will then automatically send this key in each request. You can also set a per-request key by passing `x-api-key` in the header of the request or as an additional parameter in SDK methods. All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail. 
 *
 * The version of the OpenAPI document: 0.0.5
 * Contact: support@sniptt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddSecretRequest,
    AddSecretRequestFromJSON,
    AddSecretRequestToJSON,
    AddSecretResponse,
    AddSecretResponseFromJSON,
    AddSecretResponseToJSON,
    DeleteSecretRequest,
    DeleteSecretRequestFromJSON,
    DeleteSecretRequestToJSON,
    ListVaultSecretsRequest,
    ListVaultSecretsRequestFromJSON,
    ListVaultSecretsRequestToJSON,
    ListVaultSecretsResponse,
    ListVaultSecretsResponseFromJSON,
    ListVaultSecretsResponseToJSON,
    RetrieveSecretRequest,
    RetrieveSecretRequestFromJSON,
    RetrieveSecretRequestToJSON,
    RetrieveSecretResponse,
    RetrieveSecretResponseFromJSON,
    RetrieveSecretResponseToJSON,
    UpdateSecretRequest,
    UpdateSecretRequestFromJSON,
    UpdateSecretRequestToJSON,
    UpdateSecretResponse,
    UpdateSecretResponseFromJSON,
    UpdateSecretResponseToJSON,
} from '../models';

export interface AddSecretOperationRequest {
    addSecretRequest: AddSecretRequest;
    xApiKey?: string;
}

export interface DeleteSecretOperationRequest {
    deleteSecretRequest: DeleteSecretRequest;
    xApiKey?: string;
}

export interface ListVaultSecretsOperationRequest {
    listVaultSecretsRequest: ListVaultSecretsRequest;
    xApiKey?: string;
}

export interface RetrieveSecretOperationRequest {
    retrieveSecretRequest: RetrieveSecretRequest;
    xApiKey?: string;
}

export interface UpdateSecretOperationRequest {
    updateSecretRequest: UpdateSecretRequest;
    xApiKey?: string;
}

/**
 * 
 */
export class SecretsApi extends runtime.BaseAPI {

    /**
     * Add end-to-end encrypted secret to vault
     * Add secret
     */
    async addSecretRaw(requestParameters: AddSecretOperationRequest): Promise<runtime.ApiResponse<AddSecretResponse>> {
        if (requestParameters.addSecretRequest === null || requestParameters.addSecretRequest === undefined) {
            throw new runtime.RequiredError('addSecretRequest','Required parameter requestParameters.addSecretRequest was null or undefined when calling addSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/addSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddSecretRequestToJSON(requestParameters.addSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddSecretResponseFromJSON(jsonValue));
    }

    /**
     * Add end-to-end encrypted secret to vault
     * Add secret
     */
    async addSecret(addSecretRequest: AddSecretRequest, xApiKey?: string): Promise<AddSecretResponse> {
        const response = await this.addSecretRaw({ addSecretRequest: addSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Remove end-to-end encrypted secret from vault
     * Delete secret
     */
    async deleteSecretRaw(requestParameters: DeleteSecretOperationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteSecretRequest === null || requestParameters.deleteSecretRequest === undefined) {
            throw new runtime.RequiredError('deleteSecretRequest','Required parameter requestParameters.deleteSecretRequest was null or undefined when calling deleteSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/deleteSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSecretRequestToJSON(requestParameters.deleteSecretRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove end-to-end encrypted secret from vault
     * Delete secret
     */
    async deleteSecret(deleteSecretRequest: DeleteSecretRequest, xApiKey?: string): Promise<void> {
        await this.deleteSecretRaw({ deleteSecretRequest: deleteSecretRequest, xApiKey: xApiKey });
    }

    /**
     * List secrets
     * List vault secrets
     */
    async listVaultSecretsRaw(requestParameters: ListVaultSecretsOperationRequest): Promise<runtime.ApiResponse<ListVaultSecretsResponse>> {
        if (requestParameters.listVaultSecretsRequest === null || requestParameters.listVaultSecretsRequest === undefined) {
            throw new runtime.RequiredError('listVaultSecretsRequest','Required parameter requestParameters.listVaultSecretsRequest was null or undefined when calling listVaultSecrets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/listVaultSecrets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListVaultSecretsRequestToJSON(requestParameters.listVaultSecretsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultSecretsResponseFromJSON(jsonValue));
    }

    /**
     * List secrets
     * List vault secrets
     */
    async listVaultSecrets(listVaultSecretsRequest: ListVaultSecretsRequest, xApiKey?: string): Promise<ListVaultSecretsResponse> {
        const response = await this.listVaultSecretsRaw({ listVaultSecretsRequest: listVaultSecretsRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * Retrieve secret
     */
    async retrieveSecretRaw(requestParameters: RetrieveSecretOperationRequest): Promise<runtime.ApiResponse<RetrieveSecretResponse>> {
        if (requestParameters.retrieveSecretRequest === null || requestParameters.retrieveSecretRequest === undefined) {
            throw new runtime.RequiredError('retrieveSecretRequest','Required parameter requestParameters.retrieveSecretRequest was null or undefined when calling retrieveSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/retrieveSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RetrieveSecretRequestToJSON(requestParameters.retrieveSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveSecretResponseFromJSON(jsonValue));
    }

    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * Retrieve secret
     */
    async retrieveSecret(retrieveSecretRequest: RetrieveSecretRequest, xApiKey?: string): Promise<RetrieveSecretResponse> {
        const response = await this.retrieveSecretRaw({ retrieveSecretRequest: retrieveSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Update existing end-to-end encrypted secret
     * Update secret
     */
    async updateSecretRaw(requestParameters: UpdateSecretOperationRequest): Promise<runtime.ApiResponse<UpdateSecretResponse>> {
        if (requestParameters.updateSecretRequest === null || requestParameters.updateSecretRequest === undefined) {
            throw new runtime.RequiredError('updateSecretRequest','Required parameter requestParameters.updateSecretRequest was null or undefined when calling updateSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/updateSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSecretRequestToJSON(requestParameters.updateSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSecretResponseFromJSON(jsonValue));
    }

    /**
     * Update existing end-to-end encrypted secret
     * Update secret
     */
    async updateSecret(updateSecretRequest: UpdateSecretRequest, xApiKey?: string): Promise<UpdateSecretResponse> {
        const response = await this.updateSecretRaw({ updateSecretRequest: updateSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

}
