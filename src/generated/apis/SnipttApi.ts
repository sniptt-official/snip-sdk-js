/* tslint:disable */
/* eslint-disable */
/**
 * Sniptt API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddMemberToVaultRequest,
    AddMemberToVaultRequestFromJSON,
    AddMemberToVaultRequestToJSON,
    AddSecretRequest,
    AddSecretRequestFromJSON,
    AddSecretRequestToJSON,
    AddSecretResponse,
    AddSecretResponseFromJSON,
    AddSecretResponseToJSON,
    ConfigureAccountRequest,
    ConfigureAccountRequestFromJSON,
    ConfigureAccountRequestToJSON,
    ConfigureAccountResponse,
    ConfigureAccountResponseFromJSON,
    ConfigureAccountResponseToJSON,
    CreateOneTimeSecretRequest,
    CreateOneTimeSecretRequestFromJSON,
    CreateOneTimeSecretRequestToJSON,
    CreateOneTimeSecretResponse,
    CreateOneTimeSecretResponseFromJSON,
    CreateOneTimeSecretResponseToJSON,
    CreateVaultRequest,
    CreateVaultRequestFromJSON,
    CreateVaultRequestToJSON,
    CreateVaultResponse,
    CreateVaultResponseFromJSON,
    CreateVaultResponseToJSON,
    DeleteSecretRequest,
    DeleteSecretRequestFromJSON,
    DeleteSecretRequestToJSON,
    ListVaultMembersRequest,
    ListVaultMembersRequestFromJSON,
    ListVaultMembersRequestToJSON,
    ListVaultMembersResponse,
    ListVaultMembersResponseFromJSON,
    ListVaultMembersResponseToJSON,
    ListVaultMembershipsResponse,
    ListVaultMembershipsResponseFromJSON,
    ListVaultMembershipsResponseToJSON,
    ListVaultSecretsRequest,
    ListVaultSecretsRequestFromJSON,
    ListVaultSecretsRequestToJSON,
    ListVaultSecretsResponse,
    ListVaultSecretsResponseFromJSON,
    ListVaultSecretsResponseToJSON,
    RegisterDeviceRequest,
    RegisterDeviceRequestFromJSON,
    RegisterDeviceRequestToJSON,
    RegisterDeviceResponse,
    RegisterDeviceResponseFromJSON,
    RegisterDeviceResponseToJSON,
    RemoveMemberFromVaultRequest,
    RemoveMemberFromVaultRequestFromJSON,
    RemoveMemberFromVaultRequestToJSON,
    RetrieveAccountConfigurationResponse,
    RetrieveAccountConfigurationResponseFromJSON,
    RetrieveAccountConfigurationResponseToJSON,
    RetrieveAccountPublicKeyRequest,
    RetrieveAccountPublicKeyRequestFromJSON,
    RetrieveAccountPublicKeyRequestToJSON,
    RetrieveAccountPublicKeyResponse,
    RetrieveAccountPublicKeyResponseFromJSON,
    RetrieveAccountPublicKeyResponseToJSON,
    RetrieveOneTimeSecretRequest,
    RetrieveOneTimeSecretRequestFromJSON,
    RetrieveOneTimeSecretRequestToJSON,
    RetrieveOneTimeSecretResponse,
    RetrieveOneTimeSecretResponseFromJSON,
    RetrieveOneTimeSecretResponseToJSON,
    RetrieveSecretRequest,
    RetrieveSecretRequestFromJSON,
    RetrieveSecretRequestToJSON,
    RetrieveSecretResponse,
    RetrieveSecretResponseFromJSON,
    RetrieveSecretResponseToJSON,
    RetrieveVaultKeysRequest,
    RetrieveVaultKeysRequestFromJSON,
    RetrieveVaultKeysRequestToJSON,
    RetrieveVaultKeysResponse,
    RetrieveVaultKeysResponseFromJSON,
    RetrieveVaultKeysResponseToJSON,
    SearchVaultMembershipsRequest,
    SearchVaultMembershipsRequestFromJSON,
    SearchVaultMembershipsRequestToJSON,
    SearchVaultMembershipsResponse,
    SearchVaultMembershipsResponseFromJSON,
    SearchVaultMembershipsResponseToJSON,
    SendEmailVerificationCodeRequest,
    SendEmailVerificationCodeRequestFromJSON,
    SendEmailVerificationCodeRequestToJSON,
    UpdateSecretRequest,
    UpdateSecretRequestFromJSON,
    UpdateSecretRequestToJSON,
    UpdateSecretResponse,
    UpdateSecretResponseFromJSON,
    UpdateSecretResponseToJSON,
} from '../models';

export interface AddMemberToVaultOperationRequest {
    addMemberToVaultRequest: AddMemberToVaultRequest;
    xApiKey?: string;
}

export interface AddSecretOperationRequest {
    addSecretRequest: AddSecretRequest;
    xApiKey?: string;
}

export interface ConfigureAccountOperationRequest {
    configureAccountRequest: ConfigureAccountRequest;
    xApiKey?: string;
}

export interface CreateOneTimeSecretOperationRequest {
    createOneTimeSecretRequest: CreateOneTimeSecretRequest;
    xApiKey?: string;
}

export interface CreateVaultOperationRequest {
    createVaultRequest: CreateVaultRequest;
    xApiKey?: string;
}

export interface DeleteSecretOperationRequest {
    deleteSecretRequest: DeleteSecretRequest;
    xApiKey?: string;
}

export interface ListVaultMembersOperationRequest {
    listVaultMembersRequest: ListVaultMembersRequest;
    xApiKey?: string;
}

export interface ListVaultMembershipsRequest {
    body: object;
    xApiKey?: string;
}

export interface ListVaultSecretsOperationRequest {
    listVaultSecretsRequest: ListVaultSecretsRequest;
    xApiKey?: string;
}

export interface RegisterDeviceOperationRequest {
    registerDeviceRequest: RegisterDeviceRequest;
}

export interface RemoveMemberFromVaultOperationRequest {
    removeMemberFromVaultRequest: RemoveMemberFromVaultRequest;
    xApiKey?: string;
}

export interface RetrieveAccountConfigurationRequest {
    body: object;
    xApiKey?: string;
}

export interface RetrieveAccountPublicKeyOperationRequest {
    retrieveAccountPublicKeyRequest: RetrieveAccountPublicKeyRequest;
    xApiKey?: string;
}

export interface RetrieveOneTimeSecretOperationRequest {
    retrieveOneTimeSecretRequest: RetrieveOneTimeSecretRequest;
    xApiKey?: string;
}

export interface RetrieveSecretOperationRequest {
    retrieveSecretRequest: RetrieveSecretRequest;
    xApiKey?: string;
}

export interface RetrieveVaultKeysOperationRequest {
    retrieveVaultKeysRequest: RetrieveVaultKeysRequest;
    xApiKey?: string;
}

export interface SearchVaultMembershipsOperationRequest {
    searchVaultMembershipsRequest: SearchVaultMembershipsRequest;
    xApiKey?: string;
}

export interface SendEmailVerificationCodeOperationRequest {
    sendEmailVerificationCodeRequest: SendEmailVerificationCodeRequest;
}

export interface UpdateSecretOperationRequest {
    updateSecretRequest: UpdateSecretRequest;
    xApiKey?: string;
}

/**
 * 
 */
export class SnipttApi extends runtime.BaseAPI {

    /**
     * Add member to vault
     */
    async addMemberToVaultRaw(requestParameters: AddMemberToVaultOperationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addMemberToVaultRequest === null || requestParameters.addMemberToVaultRequest === undefined) {
            throw new runtime.RequiredError('addMemberToVaultRequest','Required parameter requestParameters.addMemberToVaultRequest was null or undefined when calling addMemberToVault.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/addMemberToVault`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMemberToVaultRequestToJSON(requestParameters.addMemberToVaultRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add member to vault
     */
    async addMemberToVault(addMemberToVaultRequest: AddMemberToVaultRequest, xApiKey?: string): Promise<void> {
        await this.addMemberToVaultRaw({ addMemberToVaultRequest: addMemberToVaultRequest, xApiKey: xApiKey });
    }

    /**
     * Add end-to-end encrypted secret to vault
     */
    async addSecretRaw(requestParameters: AddSecretOperationRequest): Promise<runtime.ApiResponse<AddSecretResponse>> {
        if (requestParameters.addSecretRequest === null || requestParameters.addSecretRequest === undefined) {
            throw new runtime.RequiredError('addSecretRequest','Required parameter requestParameters.addSecretRequest was null or undefined when calling addSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/addSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddSecretRequestToJSON(requestParameters.addSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddSecretResponseFromJSON(jsonValue));
    }

    /**
     * Add end-to-end encrypted secret to vault
     */
    async addSecret(addSecretRequest: AddSecretRequest, xApiKey?: string): Promise<AddSecretResponse> {
        const response = await this.addSecretRaw({ addSecretRequest: addSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Configures Sniptt account
     */
    async configureAccountRaw(requestParameters: ConfigureAccountOperationRequest): Promise<runtime.ApiResponse<ConfigureAccountResponse>> {
        if (requestParameters.configureAccountRequest === null || requestParameters.configureAccountRequest === undefined) {
            throw new runtime.RequiredError('configureAccountRequest','Required parameter requestParameters.configureAccountRequest was null or undefined when calling configureAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/configureAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigureAccountRequestToJSON(requestParameters.configureAccountRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigureAccountResponseFromJSON(jsonValue));
    }

    /**
     * Configures Sniptt account
     */
    async configureAccount(configureAccountRequest: ConfigureAccountRequest, xApiKey?: string): Promise<ConfigureAccountResponse> {
        const response = await this.configureAccountRaw({ configureAccountRequest: configureAccountRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Create one time secret
     */
    async createOneTimeSecretRaw(requestParameters: CreateOneTimeSecretOperationRequest): Promise<runtime.ApiResponse<CreateOneTimeSecretResponse>> {
        if (requestParameters.createOneTimeSecretRequest === null || requestParameters.createOneTimeSecretRequest === undefined) {
            throw new runtime.RequiredError('createOneTimeSecretRequest','Required parameter requestParameters.createOneTimeSecretRequest was null or undefined when calling createOneTimeSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/createOneTimeSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOneTimeSecretRequestToJSON(requestParameters.createOneTimeSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOneTimeSecretResponseFromJSON(jsonValue));
    }

    /**
     * Create one time secret
     */
    async createOneTimeSecret(createOneTimeSecretRequest: CreateOneTimeSecretRequest, xApiKey?: string): Promise<CreateOneTimeSecretResponse> {
        const response = await this.createOneTimeSecretRaw({ createOneTimeSecretRequest: createOneTimeSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Create vault
     */
    async createVaultRaw(requestParameters: CreateVaultOperationRequest): Promise<runtime.ApiResponse<CreateVaultResponse>> {
        if (requestParameters.createVaultRequest === null || requestParameters.createVaultRequest === undefined) {
            throw new runtime.RequiredError('createVaultRequest','Required parameter requestParameters.createVaultRequest was null or undefined when calling createVault.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/createVault`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVaultRequestToJSON(requestParameters.createVaultRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVaultResponseFromJSON(jsonValue));
    }

    /**
     * Create vault
     */
    async createVault(createVaultRequest: CreateVaultRequest, xApiKey?: string): Promise<CreateVaultResponse> {
        const response = await this.createVaultRaw({ createVaultRequest: createVaultRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Remove end-to-end encrypted secret from vault
     */
    async deleteSecretRaw(requestParameters: DeleteSecretOperationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteSecretRequest === null || requestParameters.deleteSecretRequest === undefined) {
            throw new runtime.RequiredError('deleteSecretRequest','Required parameter requestParameters.deleteSecretRequest was null or undefined when calling deleteSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/deleteSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSecretRequestToJSON(requestParameters.deleteSecretRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove end-to-end encrypted secret from vault
     */
    async deleteSecret(deleteSecretRequest: DeleteSecretRequest, xApiKey?: string): Promise<void> {
        await this.deleteSecretRaw({ deleteSecretRequest: deleteSecretRequest, xApiKey: xApiKey });
    }

    /**
     * List vault members
     */
    async listVaultMembersRaw(requestParameters: ListVaultMembersOperationRequest): Promise<runtime.ApiResponse<ListVaultMembersResponse>> {
        if (requestParameters.listVaultMembersRequest === null || requestParameters.listVaultMembersRequest === undefined) {
            throw new runtime.RequiredError('listVaultMembersRequest','Required parameter requestParameters.listVaultMembersRequest was null or undefined when calling listVaultMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/listVaultMembers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListVaultMembersRequestToJSON(requestParameters.listVaultMembersRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultMembersResponseFromJSON(jsonValue));
    }

    /**
     * List vault members
     */
    async listVaultMembers(listVaultMembersRequest: ListVaultMembersRequest, xApiKey?: string): Promise<ListVaultMembersResponse> {
        const response = await this.listVaultMembersRaw({ listVaultMembersRequest: listVaultMembersRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * List vault memberships
     */
    async listVaultMembershipsRaw(requestParameters: ListVaultMembershipsRequest): Promise<runtime.ApiResponse<ListVaultMembershipsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listVaultMemberships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/listVaultMemberships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultMembershipsResponseFromJSON(jsonValue));
    }

    /**
     * List vault memberships
     */
    async listVaultMemberships(body: object, xApiKey?: string): Promise<ListVaultMembershipsResponse> {
        const response = await this.listVaultMembershipsRaw({ body: body, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * List vault secrets
     */
    async listVaultSecretsRaw(requestParameters: ListVaultSecretsOperationRequest): Promise<runtime.ApiResponse<ListVaultSecretsResponse>> {
        if (requestParameters.listVaultSecretsRequest === null || requestParameters.listVaultSecretsRequest === undefined) {
            throw new runtime.RequiredError('listVaultSecretsRequest','Required parameter requestParameters.listVaultSecretsRequest was null or undefined when calling listVaultSecrets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/listVaultSecrets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListVaultSecretsRequestToJSON(requestParameters.listVaultSecretsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVaultSecretsResponseFromJSON(jsonValue));
    }

    /**
     * List vault secrets
     */
    async listVaultSecrets(listVaultSecretsRequest: ListVaultSecretsRequest, xApiKey?: string): Promise<ListVaultSecretsResponse> {
        const response = await this.listVaultSecretsRaw({ listVaultSecretsRequest: listVaultSecretsRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Register user device
     */
    async registerDeviceRaw(requestParameters: RegisterDeviceOperationRequest): Promise<runtime.ApiResponse<RegisterDeviceResponse>> {
        if (requestParameters.registerDeviceRequest === null || requestParameters.registerDeviceRequest === undefined) {
            throw new runtime.RequiredError('registerDeviceRequest','Required parameter requestParameters.registerDeviceRequest was null or undefined when calling registerDevice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/registerDevice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDeviceRequestToJSON(requestParameters.registerDeviceRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterDeviceResponseFromJSON(jsonValue));
    }

    /**
     * Register user device
     */
    async registerDevice(registerDeviceRequest: RegisterDeviceRequest): Promise<RegisterDeviceResponse> {
        const response = await this.registerDeviceRaw({ registerDeviceRequest: registerDeviceRequest });
        return await response.value();
    }

    /**
     * Remove member to vault
     */
    async removeMemberFromVaultRaw(requestParameters: RemoveMemberFromVaultOperationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.removeMemberFromVaultRequest === null || requestParameters.removeMemberFromVaultRequest === undefined) {
            throw new runtime.RequiredError('removeMemberFromVaultRequest','Required parameter requestParameters.removeMemberFromVaultRequest was null or undefined when calling removeMemberFromVault.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/removeMemberFromVault`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMemberFromVaultRequestToJSON(requestParameters.removeMemberFromVaultRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove member to vault
     */
    async removeMemberFromVault(removeMemberFromVaultRequest: RemoveMemberFromVaultRequest, xApiKey?: string): Promise<void> {
        await this.removeMemberFromVaultRaw({ removeMemberFromVaultRequest: removeMemberFromVaultRequest, xApiKey: xApiKey });
    }

    /**
     * Send email verification code
     */
    async retrieveAccountConfigurationRaw(requestParameters: RetrieveAccountConfigurationRequest): Promise<runtime.ApiResponse<RetrieveAccountConfigurationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling retrieveAccountConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/retrieveAccountConfiguration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveAccountConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Send email verification code
     */
    async retrieveAccountConfiguration(body: object, xApiKey?: string): Promise<RetrieveAccountConfigurationResponse> {
        const response = await this.retrieveAccountConfigurationRaw({ body: body, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Retrieve account public key
     */
    async retrieveAccountPublicKeyRaw(requestParameters: RetrieveAccountPublicKeyOperationRequest): Promise<runtime.ApiResponse<RetrieveAccountPublicKeyResponse>> {
        if (requestParameters.retrieveAccountPublicKeyRequest === null || requestParameters.retrieveAccountPublicKeyRequest === undefined) {
            throw new runtime.RequiredError('retrieveAccountPublicKeyRequest','Required parameter requestParameters.retrieveAccountPublicKeyRequest was null or undefined when calling retrieveAccountPublicKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/retrieveAccountPublicKey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RetrieveAccountPublicKeyRequestToJSON(requestParameters.retrieveAccountPublicKeyRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveAccountPublicKeyResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve account public key
     */
    async retrieveAccountPublicKey(retrieveAccountPublicKeyRequest: RetrieveAccountPublicKeyRequest, xApiKey?: string): Promise<RetrieveAccountPublicKeyResponse> {
        const response = await this.retrieveAccountPublicKeyRaw({ retrieveAccountPublicKeyRequest: retrieveAccountPublicKeyRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Retrieve one time secret
     */
    async retrieveOneTimeSecretRaw(requestParameters: RetrieveOneTimeSecretOperationRequest): Promise<runtime.ApiResponse<RetrieveOneTimeSecretResponse>> {
        if (requestParameters.retrieveOneTimeSecretRequest === null || requestParameters.retrieveOneTimeSecretRequest === undefined) {
            throw new runtime.RequiredError('retrieveOneTimeSecretRequest','Required parameter requestParameters.retrieveOneTimeSecretRequest was null or undefined when calling retrieveOneTimeSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/retrieveOneTimeSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RetrieveOneTimeSecretRequestToJSON(requestParameters.retrieveOneTimeSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveOneTimeSecretResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve one time secret
     */
    async retrieveOneTimeSecret(retrieveOneTimeSecretRequest: RetrieveOneTimeSecretRequest, xApiKey?: string): Promise<RetrieveOneTimeSecretResponse> {
        const response = await this.retrieveOneTimeSecretRaw({ retrieveOneTimeSecretRequest: retrieveOneTimeSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     */
    async retrieveSecretRaw(requestParameters: RetrieveSecretOperationRequest): Promise<runtime.ApiResponse<RetrieveSecretResponse>> {
        if (requestParameters.retrieveSecretRequest === null || requestParameters.retrieveSecretRequest === undefined) {
            throw new runtime.RequiredError('retrieveSecretRequest','Required parameter requestParameters.retrieveSecretRequest was null or undefined when calling retrieveSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/retrieveSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RetrieveSecretRequestToJSON(requestParameters.retrieveSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveSecretResponseFromJSON(jsonValue));
    }

    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     */
    async retrieveSecret(retrieveSecretRequest: RetrieveSecretRequest, xApiKey?: string): Promise<RetrieveSecretResponse> {
        const response = await this.retrieveSecretRaw({ retrieveSecretRequest: retrieveSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Retrieve vault keys
     */
    async retrieveVaultKeysRaw(requestParameters: RetrieveVaultKeysOperationRequest): Promise<runtime.ApiResponse<RetrieveVaultKeysResponse>> {
        if (requestParameters.retrieveVaultKeysRequest === null || requestParameters.retrieveVaultKeysRequest === undefined) {
            throw new runtime.RequiredError('retrieveVaultKeysRequest','Required parameter requestParameters.retrieveVaultKeysRequest was null or undefined when calling retrieveVaultKeys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/retrieveVaultKeys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RetrieveVaultKeysRequestToJSON(requestParameters.retrieveVaultKeysRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveVaultKeysResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve vault keys
     */
    async retrieveVaultKeys(retrieveVaultKeysRequest: RetrieveVaultKeysRequest, xApiKey?: string): Promise<RetrieveVaultKeysResponse> {
        const response = await this.retrieveVaultKeysRaw({ retrieveVaultKeysRequest: retrieveVaultKeysRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Search Vault memberships
     */
    async searchVaultMembershipsRaw(requestParameters: SearchVaultMembershipsOperationRequest): Promise<runtime.ApiResponse<SearchVaultMembershipsResponse>> {
        if (requestParameters.searchVaultMembershipsRequest === null || requestParameters.searchVaultMembershipsRequest === undefined) {
            throw new runtime.RequiredError('searchVaultMembershipsRequest','Required parameter requestParameters.searchVaultMembershipsRequest was null or undefined when calling searchVaultMemberships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/searchVaultMemberships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchVaultMembershipsRequestToJSON(requestParameters.searchVaultMembershipsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchVaultMembershipsResponseFromJSON(jsonValue));
    }

    /**
     * Search Vault memberships
     */
    async searchVaultMemberships(searchVaultMembershipsRequest: SearchVaultMembershipsRequest, xApiKey?: string): Promise<SearchVaultMembershipsResponse> {
        const response = await this.searchVaultMembershipsRaw({ searchVaultMembershipsRequest: searchVaultMembershipsRequest, xApiKey: xApiKey });
        return await response.value();
    }

    /**
     * Send email verification code
     */
    async sendEmailVerificationCodeRaw(requestParameters: SendEmailVerificationCodeOperationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.sendEmailVerificationCodeRequest === null || requestParameters.sendEmailVerificationCodeRequest === undefined) {
            throw new runtime.RequiredError('sendEmailVerificationCodeRequest','Required parameter requestParameters.sendEmailVerificationCodeRequest was null or undefined when calling sendEmailVerificationCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/sendEmailVerificationCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendEmailVerificationCodeRequestToJSON(requestParameters.sendEmailVerificationCodeRequest),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send email verification code
     */
    async sendEmailVerificationCode(sendEmailVerificationCodeRequest: SendEmailVerificationCodeRequest): Promise<object> {
        const response = await this.sendEmailVerificationCodeRaw({ sendEmailVerificationCodeRequest: sendEmailVerificationCodeRequest });
        return await response.value();
    }

    /**
     * Update existing end-to-end encrypted secret
     */
    async updateSecretRaw(requestParameters: UpdateSecretOperationRequest): Promise<runtime.ApiResponse<UpdateSecretResponse>> {
        if (requestParameters.updateSecretRequest === null || requestParameters.updateSecretRequest === undefined) {
            throw new runtime.RequiredError('updateSecretRequest','Required parameter requestParameters.updateSecretRequest was null or undefined when calling updateSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/updateSecret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSecretRequestToJSON(requestParameters.updateSecretRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSecretResponseFromJSON(jsonValue));
    }

    /**
     * Update existing end-to-end encrypted secret
     */
    async updateSecret(updateSecretRequest: UpdateSecretRequest, xApiKey?: string): Promise<UpdateSecretResponse> {
        const response = await this.updateSecretRaw({ updateSecretRequest: updateSecretRequest, xApiKey: xApiKey });
        return await response.value();
    }

}
