/**
 * Sniptt API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AddMemberToVaultRequest
 */
export interface AddMemberToVaultRequest {
    /**
     *
     * @type {string}
     * @memberof AddMemberToVaultRequest
     */
    AccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof AddMemberToVaultRequest
     */
    Role: string;
    /**
     *
     * @type {string}
     * @memberof AddMemberToVaultRequest
     */
    VaultEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof AddMemberToVaultRequest
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface AddSecretRequest
 */
export interface AddSecretRequest {
    /**
     *
     * @type {string}
     * @memberof AddSecretRequest
     */
    SecretName: string;
    /**
     *
     * @type {string}
     * @memberof AddSecretRequest
     */
    SecretContentType: string;
    /**
     *
     * @type {string}
     * @memberof AddSecretRequest
     */
    VaultId: string;
    /**
     *
     * @type {string}
     * @memberof AddSecretRequest
     */
    SecretEncryptedContent: string;
}
/**
 *
 * @export
 * @interface AddSecretResponse
 */
export interface AddSecretResponse {
    /**
     *
     * @type {string}
     * @memberof AddSecretResponse
     */
    SecretId: string;
}
/**
 *
 * @export
 * @interface ConfigureAccountRequest
 */
export interface ConfigureAccountRequest {
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountRequest
     */
    PersonalVaultEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountRequest
     */
    PersonalVaultPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountRequest
     */
    AccountPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountRequest
     */
    AccountName: string;
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountRequest
     */
    AccountEncryptionKeySalt: string;
}
/**
 *
 * @export
 * @interface ConfigureAccountResponse
 */
export interface ConfigureAccountResponse {
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountResponse
     */
    AccountId: string;
    /**
     *
     * @type {string}
     * @memberof ConfigureAccountResponse
     */
    PersonalVaultId: string;
}
/**
 *
 * @export
 * @interface CreateOneTimeSecretRequest
 */
export interface CreateOneTimeSecretRequest {
    /**
     *
     * @type {string}
     * @memberof CreateOneTimeSecretRequest
     */
    OneTimeSecretPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof CreateOneTimeSecretRequest
     */
    OneTimeSecretEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof CreateOneTimeSecretRequest
     */
    OneTimeSecretContentType: string;
    /**
     *
     * @type {string}
     * @memberof CreateOneTimeSecretRequest
     */
    OneTimeSecretEncryptedContent: string;
}
/**
 *
 * @export
 * @interface CreateOneTimeSecretResponse
 */
export interface CreateOneTimeSecretResponse {
    /**
     *
     * @type {string}
     * @memberof CreateOneTimeSecretResponse
     */
    OneTimeSecretId: string;
}
/**
 *
 * @export
 * @interface CreateVaultRequest
 */
export interface CreateVaultRequest {
    /**
     *
     * @type {string}
     * @memberof CreateVaultRequest
     */
    VaultName: string;
    /**
     *
     * @type {string}
     * @memberof CreateVaultRequest
     */
    VaultEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof CreateVaultRequest
     */
    VaultPublicKey: string;
}
/**
 *
 * @export
 * @interface CreateVaultResponse
 */
export interface CreateVaultResponse {
    /**
     *
     * @type {string}
     * @memberof CreateVaultResponse
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface DeleteSecretRequest
 */
export interface DeleteSecretRequest {
    /**
     *
     * @type {string}
     * @memberof DeleteSecretRequest
     */
    SecretName: string;
    /**
     *
     * @type {string}
     * @memberof DeleteSecretRequest
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface ListVaultMembersRequest
 */
export interface ListVaultMembersRequest {
    /**
     *
     * @type {string}
     * @memberof ListVaultMembersRequest
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface ListVaultMembersResponse
 */
export interface ListVaultMembersResponse extends Array<VaultMember> {
}
/**
 *
 * @export
 * @interface ListVaultMembershipsResponse
 */
export interface ListVaultMembershipsResponse extends Array<VaultMembership> {
}
/**
 *
 * @export
 * @interface ListVaultSecretsRequest
 */
export interface ListVaultSecretsRequest {
    /**
     *
     * @type {string}
     * @memberof ListVaultSecretsRequest
     */
    SecretName: string;
    /**
     *
     * @type {string}
     * @memberof ListVaultSecretsRequest
     */
    SecretOwnerAccountName: string;
    /**
     *
     * @type {string}
     * @memberof ListVaultSecretsRequest
     */
    SecretOwnerAccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof ListVaultSecretsRequest
     */
    SecretId: string;
    /**
     *
     * @type {string}
     * @memberof ListVaultSecretsRequest
     */
    SecretOwnerAccountId: string;
}
/**
 *
 * @export
 * @interface ListVaultSecretsResponse
 */
export interface ListVaultSecretsResponse extends Array<VaultSecret> {
}
/**
 *
 * @export
 * @interface RegisterDeviceRequest
 */
export interface RegisterDeviceRequest {
    /**
     *
     * @type {string}
     * @memberof RegisterDeviceRequest
     */
    Email: string;
    /**
     *
     * @type {string}
     * @memberof RegisterDeviceRequest
     */
    Code: string;
    /**
     *
     * @type {string}
     * @memberof RegisterDeviceRequest
     */
    DeviceName: string;
}
/**
 *
 * @export
 * @interface RegisterDeviceResponse
 */
export interface RegisterDeviceResponse {
    /**
     *
     * @type {string}
     * @memberof RegisterDeviceResponse
     */
    ApiKey: string;
    /**
     *
     * @type {string}
     * @memberof RegisterDeviceResponse
     */
    AccountId: string;
    /**
     *
     * @type {string}
     * @memberof RegisterDeviceResponse
     */
    DeviceId: string;
    /**
     *
     * @type {boolean}
     * @memberof RegisterDeviceResponse
     */
    IsAccountConfigured: boolean;
}
/**
 *
 * @export
 * @interface RemoveMemberFromVaultRequest
 */
export interface RemoveMemberFromVaultRequest {
    /**
     *
     * @type {string}
     * @memberof RemoveMemberFromVaultRequest
     */
    AccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof RemoveMemberFromVaultRequest
     */
    VaultEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof RemoveMemberFromVaultRequest
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface RetrieveAccountConfigurationResponse
 */
export interface RetrieveAccountConfigurationResponse {
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountId: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    PersonalVaultId: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountTier: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    PersonalVaultEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    PersonalVaultPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountName: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountConfigurationResponse
     */
    AccountEncryptionKeySalt: string;
}
/**
 *
 * @export
 * @interface RetrieveAccountPublicKeyRequest
 */
export interface RetrieveAccountPublicKeyRequest {
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountPublicKeyRequest
     */
    AccountEmail: string;
}
/**
 *
 * @export
 * @interface RetrieveAccountPublicKeyResponse
 */
export interface RetrieveAccountPublicKeyResponse {
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountPublicKeyResponse
     */
    AccountId: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveAccountPublicKeyResponse
     */
    AccountPublicKey: string;
}
/**
 *
 * @export
 * @interface RetrieveOneTimeSecretRequest
 */
export interface RetrieveOneTimeSecretRequest {
    /**
     *
     * @type {string}
     * @memberof RetrieveOneTimeSecretRequest
     */
    OneTimeSecretId: string;
}
/**
 *
 * @export
 * @interface RetrieveOneTimeSecretResponse
 */
export interface RetrieveOneTimeSecretResponse {
    /**
     *
     * @type {string}
     * @memberof RetrieveOneTimeSecretResponse
     */
    OneTimeSecretPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveOneTimeSecretResponse
     */
    OneTimeSecretId: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveOneTimeSecretResponse
     */
    OneTimeSecretEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveOneTimeSecretResponse
     */
    OneTimeSecretEncryptedContent: string;
}
/**
 *
 * @export
 * @interface RetrieveSecretRequest
 */
export interface RetrieveSecretRequest {
    /**
     *
     * @type {string}
     * @memberof RetrieveSecretRequest
     */
    SecretName: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveSecretRequest
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface RetrieveSecretResponse
 */
export interface RetrieveSecretResponse {
    /**
     *
     * @type {string}
     * @memberof RetrieveSecretResponse
     */
    SecretName: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveSecretResponse
     */
    SecretContentType: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveSecretResponse
     */
    SecretId: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveSecretResponse
     */
    SecretEncryptedContent: string;
}
/**
 *
 * @export
 * @interface RetrieveVaultKeysRequest
 */
export interface RetrieveVaultKeysRequest {
    /**
     *
     * @type {string}
     * @memberof RetrieveVaultKeysRequest
     */
    VaultId: string;
}
/**
 *
 * @export
 * @interface RetrieveVaultKeysResponse
 */
export interface RetrieveVaultKeysResponse {
    /**
     *
     * @type {string}
     * @memberof RetrieveVaultKeysResponse
     */
    VaultEncryptedPrivateKey: string;
    /**
     *
     * @type {string}
     * @memberof RetrieveVaultKeysResponse
     */
    VaultPublicKey: string;
}
/**
 *
 * @export
 * @interface SearchVaultMembershipsRequest
 */
export interface SearchVaultMembershipsRequest {
    /**
     *
     * @type {string}
     * @memberof SearchVaultMembershipsRequest
     */
    VaultName: string;
}
/**
 *
 * @export
 * @interface SearchVaultMembershipsResponse
 */
export interface SearchVaultMembershipsResponse extends Array<VaultMembership> {
}
/**
 *
 * @export
 * @interface SendEmailVerificationCodeRequest
 */
export interface SendEmailVerificationCodeRequest {
    /**
     *
     * @type {string}
     * @memberof SendEmailVerificationCodeRequest
     */
    Email: string;
}
/**
 *
 * @export
 * @interface VaultMember
 */
export interface VaultMember {
    /**
     *
     * @type {string}
     * @memberof VaultMember
     */
    Role: string;
    /**
     *
     * @type {string}
     * @memberof VaultMember
     */
    AccountId: string;
    /**
     *
     * @type {string}
     * @memberof VaultMember
     */
    AccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof VaultMember
     */
    AccountPublicKey: string;
    /**
     *
     * @type {string}
     * @memberof VaultMember
     */
    AccountName: string;
}
/**
 *
 * @export
 * @interface VaultMembership
 */
export interface VaultMembership {
    /**
     *
     * @type {string}
     * @memberof VaultMembership
     */
    Role: string;
    /**
     *
     * @type {string}
     * @memberof VaultMembership
     */
    VaultOwnerAccountId: string;
    /**
     *
     * @type {string}
     * @memberof VaultMembership
     */
    VaultName: string;
    /**
     *
     * @type {string}
     * @memberof VaultMembership
     */
    VaultOwnerAccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof VaultMembership
     */
    VaultId: string;
    /**
     *
     * @type {string}
     * @memberof VaultMembership
     */
    VaultOwnerAccountName: string;
}
/**
 *
 * @export
 * @interface VaultSecret
 */
export interface VaultSecret {
    /**
     *
     * @type {string}
     * @memberof VaultSecret
     */
    SecretName: string;
    /**
     *
     * @type {string}
     * @memberof VaultSecret
     */
    SecretOwnerAccountName: string;
    /**
     *
     * @type {string}
     * @memberof VaultSecret
     */
    SecretOwnerAccountEmail: string;
    /**
     *
     * @type {string}
     * @memberof VaultSecret
     */
    SecretId: string;
    /**
     *
     * @type {string}
     * @memberof VaultSecret
     */
    SecretOwnerAccountId: string;
}
/**
 * SnipttApi - axios parameter creator
 * @export
 */
export declare const SnipttApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add member to vault
     * @param {AddMemberToVaultRequest} addMemberToVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMemberToVault: (addMemberToVaultRequest: AddMemberToVaultRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Add end-to-end encrypted secret to vault
     * @param {AddSecretRequest} addSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSecret: (addSecretRequest: AddSecretRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Configures Sniptt account
     * @param {ConfigureAccountRequest} configureAccountRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureAccount: (configureAccountRequest: ConfigureAccountRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create one time secret
     * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneTimeSecret: (createOneTimeSecretRequest: CreateOneTimeSecretRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create vault
     * @param {CreateVaultRequest} createVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVault: (createVaultRequest: CreateVaultRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Remove end-to-end encrypted secret from vault
     * @param {DeleteSecretRequest} deleteSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSecret: (deleteSecretRequest: DeleteSecretRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * List vault members
     * @param {ListVaultMembersRequest} listVaultMembersRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultMembers: (listVaultMembersRequest: ListVaultMembersRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * List vault memberships
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultMemberships: (body: object, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * List vault secrets
     * @param {ListVaultSecretsRequest} listVaultSecretsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultSecrets: (listVaultSecretsRequest: ListVaultSecretsRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Register user device
     * @param {RegisterDeviceRequest} registerDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDevice: (registerDeviceRequest: RegisterDeviceRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Remove member to vault
     * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMemberFromVault: (removeMemberFromVaultRequest: RemoveMemberFromVaultRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Send email verification code
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveAccountConfiguration: (body: object, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve account public key
     * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveAccountPublicKey: (retrieveAccountPublicKeyRequest: RetrieveAccountPublicKeyRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve one time secret
     * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOneTimeSecret: (retrieveOneTimeSecretRequest: RetrieveOneTimeSecretRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * @param {RetrieveSecretRequest} retrieveSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSecret: (retrieveSecretRequest: RetrieveSecretRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve vault keys
     * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveVaultKeys: (retrieveVaultKeysRequest: RetrieveVaultKeysRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Search Vault memberships
     * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchVaultMemberships: (searchVaultMembershipsRequest: SearchVaultMembershipsRequest, xApiKey?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Send email verification code
     * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailVerificationCode: (sendEmailVerificationCodeRequest: SendEmailVerificationCodeRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * SnipttApi - functional programming interface
 * @export
 */
export declare const SnipttApiFp: (configuration?: Configuration) => {
    /**
     * Add member to vault
     * @param {AddMemberToVaultRequest} addMemberToVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMemberToVault(addMemberToVaultRequest: AddMemberToVaultRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Add end-to-end encrypted secret to vault
     * @param {AddSecretRequest} addSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSecret(addSecretRequest: AddSecretRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSecretResponse>>;
    /**
     * Configures Sniptt account
     * @param {ConfigureAccountRequest} configureAccountRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureAccount(configureAccountRequest: ConfigureAccountRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigureAccountResponse>>;
    /**
     * Create one time secret
     * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneTimeSecret(createOneTimeSecretRequest: CreateOneTimeSecretRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneTimeSecretResponse>>;
    /**
     * Create vault
     * @param {CreateVaultRequest} createVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVault(createVaultRequest: CreateVaultRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVaultResponse>>;
    /**
     * Remove end-to-end encrypted secret from vault
     * @param {DeleteSecretRequest} deleteSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSecret(deleteSecretRequest: DeleteSecretRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List vault members
     * @param {ListVaultMembersRequest} listVaultMembersRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultMembers(listVaultMembersRequest: ListVaultMembersRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVaultMembersResponse>>;
    /**
     * List vault memberships
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultMemberships(body: object, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVaultMembershipsResponse>>;
    /**
     * List vault secrets
     * @param {ListVaultSecretsRequest} listVaultSecretsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultSecrets(listVaultSecretsRequest: ListVaultSecretsRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVaultSecretsResponse>>;
    /**
     * Register user device
     * @param {RegisterDeviceRequest} registerDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDevice(registerDeviceRequest: RegisterDeviceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDeviceResponse>>;
    /**
     * Remove member to vault
     * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMemberFromVault(removeMemberFromVaultRequest: RemoveMemberFromVaultRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Send email verification code
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveAccountConfiguration(body: object, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveAccountConfigurationResponse>>;
    /**
     * Retrieve account public key
     * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveAccountPublicKey(retrieveAccountPublicKeyRequest: RetrieveAccountPublicKeyRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveAccountPublicKeyResponse>>;
    /**
     * Retrieve one time secret
     * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOneTimeSecret(retrieveOneTimeSecretRequest: RetrieveOneTimeSecretRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveOneTimeSecretResponse>>;
    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * @param {RetrieveSecretRequest} retrieveSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSecret(retrieveSecretRequest: RetrieveSecretRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveSecretResponse>>;
    /**
     * Retrieve vault keys
     * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveVaultKeys(retrieveVaultKeysRequest: RetrieveVaultKeysRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveVaultKeysResponse>>;
    /**
     * Search Vault memberships
     * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchVaultMemberships(searchVaultMembershipsRequest: SearchVaultMembershipsRequest, xApiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchVaultMembershipsResponse>>;
    /**
     * Send email verification code
     * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailVerificationCode(sendEmailVerificationCodeRequest: SendEmailVerificationCodeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * SnipttApi - factory interface
 * @export
 */
export declare const SnipttApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add member to vault
     * @param {AddMemberToVaultRequest} addMemberToVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMemberToVault(addMemberToVaultRequest: AddMemberToVaultRequest, xApiKey?: string, options?: any): AxiosPromise<void>;
    /**
     * Add end-to-end encrypted secret to vault
     * @param {AddSecretRequest} addSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSecret(addSecretRequest: AddSecretRequest, xApiKey?: string, options?: any): AxiosPromise<AddSecretResponse>;
    /**
     * Configures Sniptt account
     * @param {ConfigureAccountRequest} configureAccountRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureAccount(configureAccountRequest: ConfigureAccountRequest, xApiKey?: string, options?: any): AxiosPromise<ConfigureAccountResponse>;
    /**
     * Create one time secret
     * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneTimeSecret(createOneTimeSecretRequest: CreateOneTimeSecretRequest, xApiKey?: string, options?: any): AxiosPromise<CreateOneTimeSecretResponse>;
    /**
     * Create vault
     * @param {CreateVaultRequest} createVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVault(createVaultRequest: CreateVaultRequest, xApiKey?: string, options?: any): AxiosPromise<CreateVaultResponse>;
    /**
     * Remove end-to-end encrypted secret from vault
     * @param {DeleteSecretRequest} deleteSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSecret(deleteSecretRequest: DeleteSecretRequest, xApiKey?: string, options?: any): AxiosPromise<void>;
    /**
     * List vault members
     * @param {ListVaultMembersRequest} listVaultMembersRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultMembers(listVaultMembersRequest: ListVaultMembersRequest, xApiKey?: string, options?: any): AxiosPromise<ListVaultMembersResponse>;
    /**
     * List vault memberships
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultMemberships(body: object, xApiKey?: string, options?: any): AxiosPromise<ListVaultMembershipsResponse>;
    /**
     * List vault secrets
     * @param {ListVaultSecretsRequest} listVaultSecretsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVaultSecrets(listVaultSecretsRequest: ListVaultSecretsRequest, xApiKey?: string, options?: any): AxiosPromise<ListVaultSecretsResponse>;
    /**
     * Register user device
     * @param {RegisterDeviceRequest} registerDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerDevice(registerDeviceRequest: RegisterDeviceRequest, options?: any): AxiosPromise<RegisterDeviceResponse>;
    /**
     * Remove member to vault
     * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMemberFromVault(removeMemberFromVaultRequest: RemoveMemberFromVaultRequest, xApiKey?: string, options?: any): AxiosPromise<void>;
    /**
     * Send email verification code
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveAccountConfiguration(body: object, xApiKey?: string, options?: any): AxiosPromise<RetrieveAccountConfigurationResponse>;
    /**
     * Retrieve account public key
     * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveAccountPublicKey(retrieveAccountPublicKeyRequest: RetrieveAccountPublicKeyRequest, xApiKey?: string, options?: any): AxiosPromise<RetrieveAccountPublicKeyResponse>;
    /**
     * Retrieve one time secret
     * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOneTimeSecret(retrieveOneTimeSecretRequest: RetrieveOneTimeSecretRequest, xApiKey?: string, options?: any): AxiosPromise<RetrieveOneTimeSecretResponse>;
    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * @param {RetrieveSecretRequest} retrieveSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveSecret(retrieveSecretRequest: RetrieveSecretRequest, xApiKey?: string, options?: any): AxiosPromise<RetrieveSecretResponse>;
    /**
     * Retrieve vault keys
     * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveVaultKeys(retrieveVaultKeysRequest: RetrieveVaultKeysRequest, xApiKey?: string, options?: any): AxiosPromise<RetrieveVaultKeysResponse>;
    /**
     * Search Vault memberships
     * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchVaultMemberships(searchVaultMembershipsRequest: SearchVaultMembershipsRequest, xApiKey?: string, options?: any): AxiosPromise<SearchVaultMembershipsResponse>;
    /**
     * Send email verification code
     * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailVerificationCode(sendEmailVerificationCodeRequest: SendEmailVerificationCodeRequest, options?: any): AxiosPromise<object>;
};
/**
 * SnipttApi - object-oriented interface
 * @export
 * @class SnipttApi
 * @extends {BaseAPI}
 */
export declare class SnipttApi extends BaseAPI {
    /**
     * Add member to vault
     * @param {AddMemberToVaultRequest} addMemberToVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    addMemberToVault(addMemberToVaultRequest: AddMemberToVaultRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Add end-to-end encrypted secret to vault
     * @param {AddSecretRequest} addSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    addSecret(addSecretRequest: AddSecretRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<AddSecretResponse>>;
    /**
     * Configures Sniptt account
     * @param {ConfigureAccountRequest} configureAccountRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    configureAccount(configureAccountRequest: ConfigureAccountRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<ConfigureAccountResponse>>;
    /**
     * Create one time secret
     * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    createOneTimeSecret(createOneTimeSecretRequest: CreateOneTimeSecretRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<CreateOneTimeSecretResponse>>;
    /**
     * Create vault
     * @param {CreateVaultRequest} createVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    createVault(createVaultRequest: CreateVaultRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<CreateVaultResponse>>;
    /**
     * Remove end-to-end encrypted secret from vault
     * @param {DeleteSecretRequest} deleteSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    deleteSecret(deleteSecretRequest: DeleteSecretRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * List vault members
     * @param {ListVaultMembersRequest} listVaultMembersRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    listVaultMembers(listVaultMembersRequest: ListVaultMembersRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<ListVaultMembersResponse>>;
    /**
     * List vault memberships
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    listVaultMemberships(body: object, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<ListVaultMembershipsResponse>>;
    /**
     * List vault secrets
     * @param {ListVaultSecretsRequest} listVaultSecretsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    listVaultSecrets(listVaultSecretsRequest: ListVaultSecretsRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<ListVaultSecretsResponse>>;
    /**
     * Register user device
     * @param {RegisterDeviceRequest} registerDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    registerDevice(registerDeviceRequest: RegisterDeviceRequest, options?: any): Promise<import("axios").AxiosResponse<RegisterDeviceResponse>>;
    /**
     * Remove member to vault
     * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    removeMemberFromVault(removeMemberFromVaultRequest: RemoveMemberFromVaultRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Send email verification code
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    retrieveAccountConfiguration(body: object, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveAccountConfigurationResponse>>;
    /**
     * Retrieve account public key
     * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    retrieveAccountPublicKey(retrieveAccountPublicKeyRequest: RetrieveAccountPublicKeyRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveAccountPublicKeyResponse>>;
    /**
     * Retrieve one time secret
     * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    retrieveOneTimeSecret(retrieveOneTimeSecretRequest: RetrieveOneTimeSecretRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveOneTimeSecretResponse>>;
    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * @param {RetrieveSecretRequest} retrieveSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    retrieveSecret(retrieveSecretRequest: RetrieveSecretRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveSecretResponse>>;
    /**
     * Retrieve vault keys
     * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    retrieveVaultKeys(retrieveVaultKeysRequest: RetrieveVaultKeysRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<RetrieveVaultKeysResponse>>;
    /**
     * Search Vault memberships
     * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    searchVaultMemberships(searchVaultMembershipsRequest: SearchVaultMembershipsRequest, xApiKey?: string, options?: any): Promise<import("axios").AxiosResponse<SearchVaultMembershipsResponse>>;
    /**
     * Send email verification code
     * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    sendEmailVerificationCode(sendEmailVerificationCodeRequest: SendEmailVerificationCodeRequest, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
