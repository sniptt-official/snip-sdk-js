"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sniptt API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnipttApi = exports.SnipttApiFactory = exports.SnipttApiFp = exports.SnipttApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 * SnipttApi - axios parameter creator
 * @export
 */
exports.SnipttApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add member to vault
         * @param {AddMemberToVaultRequest} addMemberToVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToVault: function (addMemberToVaultRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'addMemberToVaultRequest' is not null or undefined
                            common_1.assertParamExists('addMemberToVault', 'addMemberToVaultRequest', addMemberToVaultRequest);
                            localVarPath = "/addMemberToVault";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(addMemberToVaultRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Add end-to-end encrypted secret to vault
         * @param {AddSecretRequest} addSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSecret: function (addSecretRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'addSecretRequest' is not null or undefined
                            common_1.assertParamExists('addSecret', 'addSecretRequest', addSecretRequest);
                            localVarPath = "/addSecret";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(addSecretRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Configures Sniptt account
         * @param {ConfigureAccountRequest} configureAccountRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureAccount: function (configureAccountRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'configureAccountRequest' is not null or undefined
                            common_1.assertParamExists('configureAccount', 'configureAccountRequest', configureAccountRequest);
                            localVarPath = "/configureAccount";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(configureAccountRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one time secret
         * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeSecret: function (createOneTimeSecretRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createOneTimeSecretRequest' is not null or undefined
                            common_1.assertParamExists('createOneTimeSecret', 'createOneTimeSecretRequest', createOneTimeSecretRequest);
                            localVarPath = "/createOneTimeSecret";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createOneTimeSecretRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create vault
         * @param {CreateVaultRequest} createVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVault: function (createVaultRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createVaultRequest' is not null or undefined
                            common_1.assertParamExists('createVault', 'createVaultRequest', createVaultRequest);
                            localVarPath = "/createVault";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createVaultRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove end-to-end encrypted secret from vault
         * @param {DeleteSecretRequest} deleteSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret: function (deleteSecretRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deleteSecretRequest' is not null or undefined
                            common_1.assertParamExists('deleteSecret', 'deleteSecretRequest', deleteSecretRequest);
                            localVarPath = "/deleteSecret";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteSecretRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List vault members
         * @param {ListVaultMembersRequest} listVaultMembersRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultMembers: function (listVaultMembersRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'listVaultMembersRequest' is not null or undefined
                            common_1.assertParamExists('listVaultMembers', 'listVaultMembersRequest', listVaultMembersRequest);
                            localVarPath = "/listVaultMembers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(listVaultMembersRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List vault memberships
         * @param {object} body
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultMemberships: function (body, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('listVaultMemberships', 'body', body);
                            localVarPath = "/listVaultMemberships";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List vault secrets
         * @param {ListVaultSecretsRequest} listVaultSecretsRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultSecrets: function (listVaultSecretsRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'listVaultSecretsRequest' is not null or undefined
                            common_1.assertParamExists('listVaultSecrets', 'listVaultSecretsRequest', listVaultSecretsRequest);
                            localVarPath = "/listVaultSecrets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(listVaultSecretsRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Register user device
         * @param {RegisterDeviceRequest} registerDeviceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice: function (registerDeviceRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'registerDeviceRequest' is not null or undefined
                            common_1.assertParamExists('registerDevice', 'registerDeviceRequest', registerDeviceRequest);
                            localVarPath = "/registerDevice";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(registerDeviceRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove member to vault
         * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromVault: function (removeMemberFromVaultRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'removeMemberFromVaultRequest' is not null or undefined
                            common_1.assertParamExists('removeMemberFromVault', 'removeMemberFromVaultRequest', removeMemberFromVaultRequest);
                            localVarPath = "/removeMemberFromVault";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(removeMemberFromVaultRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Send email verification code
         * @param {object} body
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAccountConfiguration: function (body, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('retrieveAccountConfiguration', 'body', body);
                            localVarPath = "/retrieveAccountConfiguration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve account public key
         * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAccountPublicKey: function (retrieveAccountPublicKeyRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'retrieveAccountPublicKeyRequest' is not null or undefined
                            common_1.assertParamExists('retrieveAccountPublicKey', 'retrieveAccountPublicKeyRequest', retrieveAccountPublicKeyRequest);
                            localVarPath = "/retrieveAccountPublicKey";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(retrieveAccountPublicKeyRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve one time secret
         * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneTimeSecret: function (retrieveOneTimeSecretRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'retrieveOneTimeSecretRequest' is not null or undefined
                            common_1.assertParamExists('retrieveOneTimeSecret', 'retrieveOneTimeSecretRequest', retrieveOneTimeSecretRequest);
                            localVarPath = "/retrieveOneTimeSecret";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(retrieveOneTimeSecretRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Fetch and decrypt end-to-end encrypted secret from vault
         * @param {RetrieveSecretRequest} retrieveSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSecret: function (retrieveSecretRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'retrieveSecretRequest' is not null or undefined
                            common_1.assertParamExists('retrieveSecret', 'retrieveSecretRequest', retrieveSecretRequest);
                            localVarPath = "/retrieveSecret";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(retrieveSecretRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve vault keys
         * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVaultKeys: function (retrieveVaultKeysRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'retrieveVaultKeysRequest' is not null or undefined
                            common_1.assertParamExists('retrieveVaultKeys', 'retrieveVaultKeysRequest', retrieveVaultKeysRequest);
                            localVarPath = "/retrieveVaultKeys";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(retrieveVaultKeysRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Search Vault memberships
         * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVaultMemberships: function (searchVaultMembershipsRequest, xApiKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'searchVaultMembershipsRequest' is not null or undefined
                            common_1.assertParamExists('searchVaultMemberships', 'searchVaultMembershipsRequest', searchVaultMembershipsRequest);
                            localVarPath = "/searchVaultMemberships";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xApiKey !== undefined && xApiKey !== null) {
                                localVarHeaderParameter['x-api-key'] = String(xApiKey);
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(searchVaultMembershipsRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Send email verification code
         * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerificationCode: function (sendEmailVerificationCodeRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sendEmailVerificationCodeRequest' is not null or undefined
                            common_1.assertParamExists('sendEmailVerificationCode', 'sendEmailVerificationCodeRequest', sendEmailVerificationCodeRequest);
                            localVarPath = "/sendEmailVerificationCode";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sendEmailVerificationCodeRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SnipttApi - functional programming interface
 * @export
 */
exports.SnipttApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SnipttApiAxiosParamCreator(configuration);
    return {
        /**
         * Add member to vault
         * @param {AddMemberToVaultRequest} addMemberToVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToVault: function (addMemberToVaultRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMemberToVault(addMemberToVaultRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Add end-to-end encrypted secret to vault
         * @param {AddSecretRequest} addSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSecret: function (addSecretRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSecret(addSecretRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Configures Sniptt account
         * @param {ConfigureAccountRequest} configureAccountRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureAccount: function (configureAccountRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.configureAccount(configureAccountRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create one time secret
         * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeSecret: function (createOneTimeSecretRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneTimeSecret(createOneTimeSecretRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create vault
         * @param {CreateVaultRequest} createVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVault: function (createVaultRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createVault(createVaultRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove end-to-end encrypted secret from vault
         * @param {DeleteSecretRequest} deleteSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret: function (deleteSecretRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSecret(deleteSecretRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List vault members
         * @param {ListVaultMembersRequest} listVaultMembersRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultMembers: function (listVaultMembersRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listVaultMembers(listVaultMembersRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List vault memberships
         * @param {object} body
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultMemberships: function (body, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listVaultMemberships(body, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List vault secrets
         * @param {ListVaultSecretsRequest} listVaultSecretsRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultSecrets: function (listVaultSecretsRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listVaultSecrets(listVaultSecretsRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Register user device
         * @param {RegisterDeviceRequest} registerDeviceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice: function (registerDeviceRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerDevice(registerDeviceRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove member to vault
         * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromVault: function (removeMemberFromVaultRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeMemberFromVault(removeMemberFromVaultRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send email verification code
         * @param {object} body
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAccountConfiguration: function (body, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveAccountConfiguration(body, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve account public key
         * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAccountPublicKey: function (retrieveAccountPublicKeyRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveAccountPublicKey(retrieveAccountPublicKeyRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve one time secret
         * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneTimeSecret: function (retrieveOneTimeSecretRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveOneTimeSecret(retrieveOneTimeSecretRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Fetch and decrypt end-to-end encrypted secret from vault
         * @param {RetrieveSecretRequest} retrieveSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSecret: function (retrieveSecretRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveSecret(retrieveSecretRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve vault keys
         * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVaultKeys: function (retrieveVaultKeysRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveVaultKeys(retrieveVaultKeysRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Search Vault memberships
         * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVaultMemberships: function (searchVaultMembershipsRequest, xApiKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchVaultMemberships(searchVaultMembershipsRequest, xApiKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send email verification code
         * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerificationCode: function (sendEmailVerificationCodeRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendEmailVerificationCode(sendEmailVerificationCodeRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SnipttApi - factory interface
 * @export
 */
exports.SnipttApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SnipttApiFp(configuration);
    return {
        /**
         * Add member to vault
         * @param {AddMemberToVaultRequest} addMemberToVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToVault: function (addMemberToVaultRequest, xApiKey, options) {
            return localVarFp.addMemberToVault(addMemberToVaultRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Add end-to-end encrypted secret to vault
         * @param {AddSecretRequest} addSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSecret: function (addSecretRequest, xApiKey, options) {
            return localVarFp.addSecret(addSecretRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Configures Sniptt account
         * @param {ConfigureAccountRequest} configureAccountRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureAccount: function (configureAccountRequest, xApiKey, options) {
            return localVarFp.configureAccount(configureAccountRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one time secret
         * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeSecret: function (createOneTimeSecretRequest, xApiKey, options) {
            return localVarFp.createOneTimeSecret(createOneTimeSecretRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create vault
         * @param {CreateVaultRequest} createVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVault: function (createVaultRequest, xApiKey, options) {
            return localVarFp.createVault(createVaultRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove end-to-end encrypted secret from vault
         * @param {DeleteSecretRequest} deleteSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret: function (deleteSecretRequest, xApiKey, options) {
            return localVarFp.deleteSecret(deleteSecretRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List vault members
         * @param {ListVaultMembersRequest} listVaultMembersRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultMembers: function (listVaultMembersRequest, xApiKey, options) {
            return localVarFp.listVaultMembers(listVaultMembersRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List vault memberships
         * @param {object} body
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultMemberships: function (body, xApiKey, options) {
            return localVarFp.listVaultMemberships(body, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List vault secrets
         * @param {ListVaultSecretsRequest} listVaultSecretsRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVaultSecrets: function (listVaultSecretsRequest, xApiKey, options) {
            return localVarFp.listVaultSecrets(listVaultSecretsRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Register user device
         * @param {RegisterDeviceRequest} registerDeviceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice: function (registerDeviceRequest, options) {
            return localVarFp.registerDevice(registerDeviceRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove member to vault
         * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromVault: function (removeMemberFromVaultRequest, xApiKey, options) {
            return localVarFp.removeMemberFromVault(removeMemberFromVaultRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send email verification code
         * @param {object} body
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAccountConfiguration: function (body, xApiKey, options) {
            return localVarFp.retrieveAccountConfiguration(body, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve account public key
         * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAccountPublicKey: function (retrieveAccountPublicKeyRequest, xApiKey, options) {
            return localVarFp.retrieveAccountPublicKey(retrieveAccountPublicKeyRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve one time secret
         * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOneTimeSecret: function (retrieveOneTimeSecretRequest, xApiKey, options) {
            return localVarFp.retrieveOneTimeSecret(retrieveOneTimeSecretRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Fetch and decrypt end-to-end encrypted secret from vault
         * @param {RetrieveSecretRequest} retrieveSecretRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSecret: function (retrieveSecretRequest, xApiKey, options) {
            return localVarFp.retrieveSecret(retrieveSecretRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve vault keys
         * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVaultKeys: function (retrieveVaultKeysRequest, xApiKey, options) {
            return localVarFp.retrieveVaultKeys(retrieveVaultKeysRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Search Vault memberships
         * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
         * @param {string} [xApiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVaultMemberships: function (searchVaultMembershipsRequest, xApiKey, options) {
            return localVarFp.searchVaultMemberships(searchVaultMembershipsRequest, xApiKey, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send email verification code
         * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerificationCode: function (sendEmailVerificationCodeRequest, options) {
            return localVarFp.sendEmailVerificationCode(sendEmailVerificationCodeRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SnipttApi - object-oriented interface
 * @export
 * @class SnipttApi
 * @extends {BaseAPI}
 */
var SnipttApi = /** @class */ (function (_super) {
    __extends(SnipttApi, _super);
    function SnipttApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add member to vault
     * @param {AddMemberToVaultRequest} addMemberToVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.addMemberToVault = function (addMemberToVaultRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).addMemberToVault(addMemberToVaultRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Add end-to-end encrypted secret to vault
     * @param {AddSecretRequest} addSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.addSecret = function (addSecretRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).addSecret(addSecretRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Configures Sniptt account
     * @param {ConfigureAccountRequest} configureAccountRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.configureAccount = function (configureAccountRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).configureAccount(configureAccountRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one time secret
     * @param {CreateOneTimeSecretRequest} createOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.createOneTimeSecret = function (createOneTimeSecretRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).createOneTimeSecret(createOneTimeSecretRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create vault
     * @param {CreateVaultRequest} createVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.createVault = function (createVaultRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).createVault(createVaultRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove end-to-end encrypted secret from vault
     * @param {DeleteSecretRequest} deleteSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.deleteSecret = function (deleteSecretRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).deleteSecret(deleteSecretRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List vault members
     * @param {ListVaultMembersRequest} listVaultMembersRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.listVaultMembers = function (listVaultMembersRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).listVaultMembers(listVaultMembersRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List vault memberships
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.listVaultMemberships = function (body, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).listVaultMemberships(body, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List vault secrets
     * @param {ListVaultSecretsRequest} listVaultSecretsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.listVaultSecrets = function (listVaultSecretsRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).listVaultSecrets(listVaultSecretsRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Register user device
     * @param {RegisterDeviceRequest} registerDeviceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.registerDevice = function (registerDeviceRequest, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).registerDevice(registerDeviceRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove member to vault
     * @param {RemoveMemberFromVaultRequest} removeMemberFromVaultRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.removeMemberFromVault = function (removeMemberFromVaultRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).removeMemberFromVault(removeMemberFromVaultRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send email verification code
     * @param {object} body
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.retrieveAccountConfiguration = function (body, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).retrieveAccountConfiguration(body, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve account public key
     * @param {RetrieveAccountPublicKeyRequest} retrieveAccountPublicKeyRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.retrieveAccountPublicKey = function (retrieveAccountPublicKeyRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).retrieveAccountPublicKey(retrieveAccountPublicKeyRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve one time secret
     * @param {RetrieveOneTimeSecretRequest} retrieveOneTimeSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.retrieveOneTimeSecret = function (retrieveOneTimeSecretRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).retrieveOneTimeSecret(retrieveOneTimeSecretRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Fetch and decrypt end-to-end encrypted secret from vault
     * @param {RetrieveSecretRequest} retrieveSecretRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.retrieveSecret = function (retrieveSecretRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).retrieveSecret(retrieveSecretRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve vault keys
     * @param {RetrieveVaultKeysRequest} retrieveVaultKeysRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.retrieveVaultKeys = function (retrieveVaultKeysRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).retrieveVaultKeys(retrieveVaultKeysRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Search Vault memberships
     * @param {SearchVaultMembershipsRequest} searchVaultMembershipsRequest
     * @param {string} [xApiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.searchVaultMemberships = function (searchVaultMembershipsRequest, xApiKey, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).searchVaultMemberships(searchVaultMembershipsRequest, xApiKey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send email verification code
     * @param {SendEmailVerificationCodeRequest} sendEmailVerificationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnipttApi
     */
    SnipttApi.prototype.sendEmailVerificationCode = function (sendEmailVerificationCodeRequest, options) {
        var _this = this;
        return exports.SnipttApiFp(this.configuration).sendEmailVerificationCode(sendEmailVerificationCodeRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SnipttApi;
}(base_1.BaseAPI));
exports.SnipttApi = SnipttApi;
